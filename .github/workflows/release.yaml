---
name: Release Go
on:
  workflow_call:
    inputs:
      homebrew:
        required: false
        type: boolean
        default: false
      aqua_policy_allow:
        required: false
        type: string
      aqua_policy_config:
        required: false
        type: string
      aqua_version:
        required: true
        type: string
      go-version:
        required: true
        type: string
      runs-on:
        required: false
        type: string
        default: '"ubuntu-latest"'
        description: |
          JSON string for runs-on.
          e.g.
          runs-on: '"macos-latest"'
          runs-on: '["foo"]'
      winget_head_repo:
        required: false
        type: string
      winget_base_repo:
        required: false
        default: microsoft/winget-pkgs
        type: string
      winget_new:
        required: true
        default: false
        type: boolean
    secrets:
      gh_app_id:
        required: false
      gh_app_private_key:
        required: false
      chocolatey_api_key:
        required: false
      winget_github_token:
        required: false

permissions: {}

env:
  AQUA_POLICY_CONFIG: ${{ inputs.aqua_policy_config }}
  AQUA_LOG_COLOR: always

jobs:
  build:
    runs-on: ${{fromJSON(inputs.runs-on)}}
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: write # required to create a release
      id-token: write # required for cosign
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{inputs.go-version}}
          cache: true

      - uses: aquaproj/aqua-installer@36dc5833b04eb63f06e3bb818aa6b7a6e6db99a9 # v2.1.2
        with:
          aqua_version: ${{inputs.aqua_version}}
          policy_allow: ${{inputs.aqua_policy_allow}}

      - name: Generate token
        id: generate_token
        if: inputs.homebrew
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1.8.0
        with:
          app_id: ${{ secrets.gh_app_id }}
          private_key: ${{ secrets.gh_app_private_key }}

      - name: remove changes
        # Sometimes it is failed to release by goreleaser due to changes of go.sum
        run: git checkout -- .
      - name: fetch tags to release
        run: git fetch --tags -f
      - name: Unshallow
        run: git fetch --prune --unshallow
      - run: cosign version

      - name: Run GoReleaser
        run: goreleaser release --clean
        if: inputs.homebrew
        env:
          GITHUB_TOKEN: ${{ github.token }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CHOCOLATEY_API_KEY: ${{ secrets.chocolatey_api_key }}

      - name: Run GoReleaser
        run: goreleaser release --clean
        if: "! inputs.homebrew"
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CHOCOLATEY_API_KEY: ${{ secrets.chocolatey_api_key }}

      - name: Get parameters to send a pull request to winget-pkgs
        # manifests/<first lower case letter of publisher>/<publisher>/<package>/<version>/
        id: winget
        run: |
          set -euo pipefail

          if [ -z "$WINGET_TOKEN" ]; then
            exit 0
          fi

          echo "head_repo=${HEAD_REPO:-${GITHUB_REPOSITORY_OWNER}/winget-pkgs}" >> "$GITHUB_OUTPUT"

          cd dist/winget

          pkg_id=$(find manifests -type f | grep -E "\.yaml$" |
            sed "s|^manifests/./||" |
            head -n 1 |
            xargs -n 1 dirname)

          a=${pkg_id#*/}
          publisher=${pkg_id%%/*}
          pkg_name=${a%/*}
          version=${pkg_id##*/}

          echo "branch=$pkg_id" >> "$GITHUB_OUTPUT"
          echo "publisher=$publisher" >> "$GITHUB_OUTPUT"
          echo "pkg_name=$pkg_name" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"

          title_prefix=Update
          if [ "$WINGET_NEW" = true ]; then
            title_prefix=New
          fi
          title="$title_prefix version: ${publisher}.${pkg_name} ${version}"
          echo "title=$title" >> "$GITHUB_OUTPUT"
        env:
          WINGET_TOKEN: ${{ secrets.winget_github_token }}
          BASE_REPO: ${{ inputs.winget_base_repo }}
          HEAD_REPO: ${{ inputs.winget_head_repo }}
          WINGET_NEW: ${{ inputs.winget_new }}

      - name: Push winget manifest to a remote branch
        if: steps.winget.outputs.branch != ''
        run: |
          set -euo pipefail

          cd dist/winget
          find manifests -type f | grep -E "\.yaml$" |
            xargs ghcp commit -r "$REPO" -b "$BRANCH" -m "$COMMIT_MESSAGE"
        env:
          BRANCH: ${{ steps.winget.outputs.branch }}
          COMMIT_MESSAGE: ${{ steps.winget.outputs.title }}
          GITHUB_TOKEN: ${{ secrets.winget_github_token }}
          REPO: ${{ steps.winget.outputs.head_repo }}

      - name: Create a pull request to winget-pkgs
        if: steps.winget.outputs.branch != ''
        run: |
          sleep 5
          ghcp pull-request -r "$HEAD_REPO" -b "$BRANCH" --base-repo "$BASE_REPO" --title "$TITLE"
          # gh -R "$BASE_REPO" pr create -H "$HEAD_REPO" --title "$TITLE"
        env:
          BRANCH: ${{ steps.winget.outputs.branch }}
          TITLE: ${{ steps.winget.outputs.title }}
          GITHUB_TOKEN: ${{ secrets.winget_github_token }}
          BASE_REPO: ${{ inputs.winget_base_repo }}
          HEAD_REPO: ${{ steps.winget.outputs.head_repo }}

      - name: Generate hashes
        id: hash
        run: |
          # sha256sum generates sha256 hash for all artifacts.
          # base64 -w0 encodes to base64 and outputs on a single line.
          # sha256sum artifact1 artifact2 ... | base64 -w0
          echo "hashes=$(find dist -name "*.tar.gz" -print0 | xargs -0 sha256sum | base64 -w0)" >> "$GITHUB_OUTPUT"

  provenance:
    needs: [build]
    permissions:
      actions: read # Needed for detection of GitHub Actions environment.
      id-token: write # Needed for provenance signing and ID
      contents: write # Needed for release uploads
    # slsa-framework/slsa-github-generator doesn't support pinning version
    # > Invalid ref: 68bad40844440577b33778c9f29077a3388838e9. Expected ref of the form refs/tags/vX.Y.Z
    # https://github.com/slsa-framework/slsa-github-generator/issues/722
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.8.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
